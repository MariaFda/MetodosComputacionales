import numpy as np
import matplotlib.pyplot as plt
signal = np.loadtxt('WDBC.dat', dtype=str, delimiter=',')
signal.shape
print (signal)

#Convertir M/B a 1/0
Diagnosis = signal[:,1]
BinaryDiagnosis = np.zeros(Diagnosis.shape,dtype = float)
BinaryDiagnosis[Diagnosis == 'M'] = 0
BinaryDiagnosis[Diagnosis == 'B'] = 1
signal[:,1] = BinaryDiagnosis
signal = signal.astype(np.float)
for i in range(2,np.shape(signal)[1]):
    signal[:,i]=(signal[:,i]-np.mean(signal[:,i]))/np.sqrt(np.var(signal[:,i]))
    
#Definición de la matriz de covarianza para 2 arreglos
def matrizCovarianza(x,y):
    matrizCovarianza=np.zeros((2,2))
    matrizCovarianza[0,0]=np.mean(x*x)-np.mean(x)*np.mean(x)
    matrizCovarianza[0,1]=np.mean(x*y)-np.mean(x)*np.mean(y)
    matrizCovarianza[1,0]=matrizCovarianza[0,1]
    matrizCovarianza[1,1]=np.mean(y*y)-np.mean(y)*np.mean(y)
    return matrizCovarianza
#Matriz de covarianza de relación de las 30 
matrizCovFinal=np.zeros((30,30))

#Ciclo Que recorre los datos, calcula la covarianza y los guarda en la matriz general
for i in range(2,np.shape(signal)[1]):
    for j in range(2,np.shape(signal)[1]):
        if i==j:
            matrizCovFinal[i-2,j-2]=matrizCovarianza(signal[:,i],signal[:,j])[0,0]
        else: 
            matrizCovFinal[i-2,j-2]=matrizCovarianza(signal[:,i],signal[:,j])[0,1]
            matrizCovFinal[j-2,i-2]=matrizCovFinal[i-2,j-2]
        
#Impresion de la matriz de covarianza de dimension 30 por 30 
print("La matriz de covarianza es","\n", matrizCovFinal,"\n")

#Calculo de los valores propios y los vectores propios
valoresPropios=np.linalg.eig(matrizCovFinal)[0]
vectoresPropios=np.linalg.eig(matrizCovFinal)[1]

#Impresion de cada valor propio y cada vector propios
for i in range(np.shape(valoresPropios)[0]):
    print("El valor propio",i,"es", valoresPropios[i],"con el vector propio")
    print(vectoresPropios[i],"\n")

#Impresion de los componentes principales 
print("De acuerdo con esto tenemos que los componentes principales son")
print("El componente con valor propio",valoresPropios[0],"y vector propio")
print(vectoresPropios[0],"\n")
print("El componente con valor propio",valoresPropios[1],"y vector propio")
print(vectoresPropios[1],"\n")
print("Segun la informacion estos los componentes de radio y textura","\n")

